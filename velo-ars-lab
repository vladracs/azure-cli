# Azure cli script that builds a full blown POC for VMware SD-WAN and ars
# builds a green field hub and spoke vnets on Azure
# Expects an existing VCE edge already configured on VMware SD-WAN Orchestrator
# Inputs needed - VCO and VCE activation key



# Variables
velo1_actkey=2MQ9-HRFF-VDQT-FRQZ
vco=vco12-usvi1.velocloud.net
rg=velocloud
location=westeurope
ars_name=myARS
ars_vnet_name=RouteServerSubnet
ars_vnet_prefix=10.1.0.128/26
ars_pip_name=arspip

VCE_AS=65001
hub_vnet_name=hub
hub_vnet_prefix=10.1.0.0/24
hub_velo_subnet_public_name=velopub
hub_velo_subnet_public_prefix=10.1.0.0/26
hub_velo_subnet_private_name=velopriv
hub_velo_subnet_private_prefix=10.1.0.64/26
hub_velo1_name=velo1
hub_velo1_nic_public_name=velo1nic1
hub_velo1_nic_private_name=velo1nic2
hub_velo1_pip_name=velo1pip
spoke1_vnet_name=spoke1
spoke1_vnet_prefix=10.1.11.0/24
spoke1_vm_subnet_name=vm
spoke1_vm_subnet_prefix=10.1.11.0/26
spoke2_vnet_name=spoke2
spoke2_vnet_prefix=10.1.12.0/24
spoke2_vm_subnet_name=vm
spoke2_vm_subnet_prefix=10.1.12.0/26
velo_publisher=vmware-inc
velo_offer=sol-42222-bbj
velo_sku=vmware_sdwan_4x
velo_version=4.2.1
velo_ignore_cert_errors='true'
velo_nsg_name=velonsg
velo_cloudinit=/tmp/velocloudinit.txt
### using a smaller instance for lab/demo purpose
### refer to datasheet for production deployment specs
velo_vm_size=Standard_B2ms
# in this script vce is deployed without ssh keys, and uses user/pwd
sshkey=$(cat ~/.ssh/id_rsa.pub)
keyvault_name=myvault
velo1_actkey_name=velocloudkey1
velo_vco_secret_name=velovco

# Create RG and VNets
echo "Creating RG, VNets and Subnets"
az group create -n $rg -l $location -o none
az network vnet create -n $hub_vnet_name -g $rg --address-prefixes $hub_vnet_prefix --subnet-name $hub_velo_subnet_public_name --subnet-prefixes $hub_velo_subnet_public_prefix -o none
az network vnet subnet create -g $rg -n $hub_velo_subnet_private_name --vnet-name $hub_vnet_name --address-prefix $hub_velo_subnet_private_prefix -o none
az network vnet create -n $spoke1_vnet_name -g $rg --address-prefixes $spoke1_vnet_prefix --subnet-name $spoke1_vm_subnet_name --subnet-prefixes $spoke1_vm_subnet_prefix -o none
az network vnet create -n $spoke2_vnet_name -g $rg --address-prefixes $spoke2_vnet_prefix --subnet-name $spoke2_vm_subnet_name --subnet-prefixes $spoke2_vm_subnet_prefix -o none

# Create 2Nic VeloCloud Edge NVA(ge1 lan, ge2 wan)
echo "Creating public IP, NSG and NICs..."
az network public-ip create -g $rg -n $hub_velo1_pip_name --sku standard --allocation-method static -o none
az network nsg create -n $velo_nsg_name -g $rg -o none
az network nsg rule create --nsg-name $velo_nsg_name -g $rg -n VCMP --priority 1000 --destination-port-ranges 2426 --access Allow --protocol Udp -o none
az network nsg rule create --nsg-name $velo_nsg_name -g $rg -n SSH --priority 1010 --destination-port-ranges 22 --access Allow --protocol Tcp -o none
az network nic create -n "$hub_velo1_nic_public_name" -g $rg --vnet-name $hub_vnet_name --subnet $hub_velo_subnet_public_name --public-ip-address "$hub_velo1_pip_name" --ip-forwarding --network-security-group $velo_nsg_name -o none
az network nic create -n "$hub_velo1_nic_private_name" -g $rg --vnet-name $hub_vnet_name --subnet $hub_velo_subnet_private_name --ip-forwarding --network-security-group $velo_nsg_name -o none
# Get Activation Key (previously stored in an Azure Key Vault)
#velo1_actkey=$(az keyvault secret show --vault-name $keyvault_name -n $velo1_actkey_name --query 'value' -o tsv)
#vco=$(az keyvault secret show --vault-name $keyvault_name -n $velo_vco_secret_name --query 'value' -o tsv)

if [[ -n "$velo1_actkey" ]] && [[ -n "$vco" ]]
then
    echo "VeloCloud Activation Key and VCO successfully retrieved from Azure Key Vault $keyvault_name"
else
    echo "VeloCloud Activation Key and VCO could NOT be retrieved from Azure Key Vault $keyvault_name"
fi
cat <<EOF > $velo_cloudinit
#cloud-config
password: Velocloud123
chpasswd: { expire: False }
ssh_pwauth: True
velocloud:
 vce:
   management_interface: false
   vco: $vco
   activation_code: $velo1_actkey
   vco_ignore_cert_errors: $velo_ignore_cert_errors
EOF
velo_image_urn="${velo_publisher}:${velo_offer}:${velo_sku}:${velo_version}"
echo "Accepting image terms and creating VM..."
az vm image terms accept --urn "$velo_image_urn" -o none
az vm create -n $hub_velo1_name -g $rg -l $location --image "$velo_image_urn" --size $velo_vm_size \
    --admin-username "azure-user" --admin-password "Velocloud123" --authentication-type all --generate-ssh-keys \
    --nics "$hub_velo1_nic_private_name" "$hub_velo1_nic_public_name" -o none \
    --custom-data $velo_cloudinit --public-ip-sku Standard

###
echo "Creating ARS this can take up to 20min..."
# Create Azure Route Server
# Create ARS public IP
az network public-ip create -g $rg -n $ars_pip_name --sku standard --allocation-method static -o none --version IPV4
# Create Route Server subnet
# az network vnet subnet create --name RouteServerSubnet -g velocloud --vnet-name hub --address-prefix 10.1.0.128/26
az network vnet subnet create --name $ars_vnet_name -g $rg --vnet-name $hub_vnet_name --address-prefix $ars_vnet_prefix
#Grab ars subnet id
subnet_id=$(az network vnet subnet show --name $ars_vnet_name --resource-group $rg --vnet-name $hub_vnet_name --query id -o tsv)
# Create Azure Route Server
az network routeserver create --name $ars_name --resource-group $rg --hosted-subnet $subnet_id --public-ip-address $ars_pip_name
# Allows B2B routing
#az network routeserver update --name $ars_name --resource-group $rg --allow-b2b-traffic true

# grabing the ip of the VCE ge1
privIP=$(az vm nic show -g velocloud --vm-name $hub_velo1_name --nic $hub_velo1_nic_private_name --query "ipConfigurations[0].privateIpAddress" -o tsv)

#creating the bgp peers to VCE
az network routeserver peering create --name VCE1 --peer-ip $privIP --peer-asn $VCE_AS --routeserver $ars_name --resource-group $rg

#create vnet peering with allowed ARS gateway
echo "Creating VNET peering..."
az network vnet peering create -n hubtospoke1 -g $rg --vnet-name $hub_vnet_name --remote-vnet $spoke1_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none --allow-gateway-transit
az network vnet peering create -n spoke1tohub -g $rg --vnet-name $spoke1_vnet_name --remote-vnet $hub_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none --use-remote-gateways
az network vnet peering create -n hubtospoke2 -g $rg --vnet-name $hub_vnet_name --remote-vnet $spoke2_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none --allow-gateway-transit
az network vnet peering create -n spoke2tohub -g $rg --vnet-name $spoke2_vnet_name --remote-vnet $hub_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none --use-remote-gateways

#Optional for e2e testing
echo "Creating Test Linux VMs..."
az vm create \
  --resource-group $rg \
  --name myVm1 \
  --image UbuntuLTS \
  --vnet-name $spoke1_vnet_name \
  --subnet $spoke1_vm_subnet_name \
  --generate-ssh-keys \
  --no-wait

  az vm create \
    --resource-group $rg \
    --name myVm2 \
    --image UbuntuLTS \
    --vnet-name $spoke2_vnet_name \
    --subnet $spoke2_vm_subnet_name \
    --generate-ssh-keys \
    --no-wait
